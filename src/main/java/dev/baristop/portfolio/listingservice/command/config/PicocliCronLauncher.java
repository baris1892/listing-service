package dev.baristop.portfolio.listingservice.command.config;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;
import picocli.CommandLine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Component
@Slf4j
@AllArgsConstructor
public class PicocliCronLauncher implements ApplicationRunner {

    private final CommandLine.IFactory factory;
    private final RootCommand rootCommand;
    private final ApplicationArguments args;
    private final ApplicationContext context; // access to all Spring Beans

    @Override
    public void run(ApplicationArguments args0) {
        // Retrieve raw arguments passed to the Spring Boot application (including Spring options)
        String[] sourceArgs = args.getSourceArgs();
        if (sourceArgs.length == 0) return;

        // Filter out Spring/infrastructure options to get clean CLI arguments for Picocli
        List<String> cliArgsList = getCliArgsList(sourceArgs);

        String[] cliArgs = cliArgsList.toArray(new String[0]);
        log.info("Starting CLI job with args: {}", Arrays.toString(cliArgs));

        CommandLine cmd = new CommandLine(rootCommand, factory);

        // Register command beans found in the Spring context (including proxy-handling)
        Map<String, Runnable> commandBeans = context.getBeansOfType(Runnable.class);
        for (Runnable bean : commandBeans.values()) {
            Class<?> targetClass = bean.getClass();

            // Unwrap the Spring AOP/CGLIB proxy to access the actual class.
            // Proxies generated by Spring often contain '$$' in their class name., e.g. when @Transactional is used
            if (targetClass.getName().contains("$$")) {
                targetClass = targetClass.getSuperclass();
            }

            // Check if the unwrapped class is a Picocli command and not the RootCommand itself.
            // The @SuppressWarnings is used because 'bean' (Runnable) and 'targetClass'
            // (the class type) are not directly comparable types.
            // noinspection EqualsBetweenInconvertibleTypes
            if (targetClass.isAnnotationPresent(CommandLine.Command.class) && bean != rootCommand) {
                CommandLine.Command annotation = targetClass.getAnnotation(CommandLine.Command.class);
                cmd.addSubcommand(annotation.name(), bean);
            }
        }

        cmd.setExecutionExceptionHandler((ex, commandLine, parseResult) -> {
            log.error("Command failed: {}", ex.getMessage(), ex);
            return 1;
        });

        int exitCode = cmd.execute(cliArgs);
        System.exit(exitCode);
    }

    /**
     * Filters out command-line arguments that are typically consumed by Spring Boot
     * or related infrastructure, leaving only arguments intended for the CLI command.
     */
    private static List<String> getCliArgsList(String[] sourceArgs) {
        List<String> cliArgsList = new ArrayList<>();
        for (int i = 0; i < sourceArgs.length; i++) {
            String a = sourceArgs[i];

            // Skip common Spring/infrastructure options (customize prefixes if needed)
            if (a.startsWith("--spring.") || a.startsWith("--server.") || a.startsWith("--management.")
                || a.startsWith("--logging.") || a.equals("--debug") || a.equals("--trace")) {

                // Handle options with space-separated values (e.g., --option value, --spring.profiles active).
                // Skip the next token if it's not a flag (i.e., it's the value).
                if (!a.contains("=") && i + 1 < sourceArgs.length && !sourceArgs[i + 1].startsWith("-")) {
                    i++; // Consume value token as well
                }
                continue;
            }

            // Keep this argument for the CLI
            cliArgsList.add(a);

            // Handle non-Spring options with space-separated values (e.g., --older-than 14)
            if (a.startsWith("--") && !a.contains("=") && i + 1 < sourceArgs.length) {
                String next = sourceArgs[i + 1];
                if (!next.startsWith("-")) {
                    cliArgsList.add(next);
                    i++; // Consume the value
                }
            }
        }
        return cliArgsList;
    }
}
